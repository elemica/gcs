#!/usr/bin/env node

/*
 Set these environment variables:
   * AWS_ACCESS_KEY_ID
   * AWS_SECRET_ACCESS_KEY
*/

var CLI = require(__dirname + '/../lib/command-line').CommandLineInterface;
var Client = require(__dirname + '/../lib/client').Client;
var Runner = require(__dirname + '/scenario-runner').Runner;
var fs = require('fs');
var path = require('path');

var commandLine = new CLI();
commandLine
  .usage('--scenario <path> --output-directory <path> [options] or ' +
         '--scenarios <path> --output-directory <path> [options]')
  .option('--scenario <path to a file>',
          'Path to a scenario file.',
          String)
  .option('--scenarios <path to a directory>',
          'Path to the scenarios directory which includes one or more ' +
            '".json" scenario files.',
          String)
  .option('--output-directory <path to a directory>',
          'Path to the directory to save results.',
          String)
  .option('--document-endpoint <host:port>',
          'The host and port number of the documents/batch API.',
          String)
  .option('--acs',
          'Process requests for Amazon CloudSearch.',
          String)
  .parseClient();

var scenariosDir;
var scenarios;

if (!commandLine.options.outputDirectory)
  client.raiseFatalError('You must specify the location of the results ' +
                         'directory by "--output-directory" option.');

if (commandLine.options.scenario) {
  var scenarioFile = path.resolve(process.cwd(), commandLine.options.scenario);
  if (!path.existsSync(scenarioFile))
    client.raiseFatalError(scenarioFile + ' does not exist.');

  scenarios = [scenarioFile];
  console.log('Processing one scenario file [' + scenarioFile + ']...');
} else if (commandLine.options.scenarios) {
  scenariosDir = path.resolve(process.cwd(), commandLine.options.scenarios);
  if (!path.existsSync(scenariosDir))
    client.raiseFatalError(scenariosDir + ' does not exist.');

  console.log('Processing scenario files in [' + scenariosDir + ']...');

  scenarios = fs.readdirSync(scenariosDir);
  scenarios = scenarios.filter(function(file) {
    return /\.json$/i.test(file)
  }).map(function(file) {
    return path.resolve(scenariosDir, file);
  });
  if (!scenarios.length)
    client.raiseFatalError('No scenario file.');
} else {
  client.raiseFatalError('You must specify scenarios by "--scenario" or ' +
                         '"--scenarios" option.');
}

var options = {};
Object.keys(commandLine.options).forEach(function(key) {
  var type = typeof commandLine.options[key];
  if (type != 'function' && type != 'object')
    options[key] = commandLine.options[key];
});
Object.keys(CLI.prototype).concat(Object.keys(commandLine)).forEach(function(key) {
  var type = typeof commandLine[key];
  if (type != 'function' && type != 'object')
    options[key] = commandLine[key];
});

var runner = new Runner(options, function(error, event) {
      switch (event.type) {
        case 'scenario:start':
          console.log('');
          console.log('Scenario file: ' + event.path);
          break;

        case 'scenario:finish':
          console.log('  Done. (elapsed time: ' + event.elapsedTime + 'msec)');
          break;

        case 'request:start':
          console.log('  Processing request: ' + event.name);
          break;

        case 'request:write':
          console.log('  Wrote ' + event.path);
          break;

        case 'all:finish':
          console.log('');
          console.log('All scenarios are finished. ' +
                        '(total elapsed time: ' + event.elapsedTime + 'msec)');
          process.exit(0);
          break;
      }
    });
runner.run(scenarios);
