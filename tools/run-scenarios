#!/usr/bin/env node

/*
 Set these environment variables:
   * AWS_ACCESS_KEY_ID
   * AWS_SECRET_ACCESS_KEY
*/

var CLI = require(__dirname + '/../lib/command-line').CommandLineInterface;
var ScenariosRunner = require(__dirname + '/scenario-runner').ScenariosRunner;
var fs = require('fs');
var path = require('path');
var mkdirp = require('mkdirp');

var commandLine = new CLI();
commandLine
  .usage('--scenario <path> --output-directory <path> [options] or ' +
         '--scenarios <path> --output-directory <path> [options]')
  .option('--scenario <path to a file>',
          'Path to a scenario file.',
          String)
  .option('--scenarios <path to a directory>',
          'Path to the scenarios directory which includes one or more ' +
            '".json" scenario files.',
          String)
  .option('--output-directory <path to a directory>',
          'Path to the directory to save results.',
          String)
  .option('--document-endpoint <host:port>',
          'The host and port number of the documents/batch API.',
          String)
  .option('--acs',
          'Process requests for Amazon CloudSearch.',
          String)
  .parseClient();

var scenariosDir;
var scenarios;

if (!commandLine.options.outputDirectory)
  commandLine.raiseFatalError('You must specify the location of the results ' +
                              'directory by "--output-directory" option.');

if (commandLine.options.scenario) {
  var scenarioFile = path.resolve(process.cwd(), commandLine.options.scenario);
  if (!path.existsSync(scenarioFile))
    commandLine.raiseFatalError(scenarioFile + ' does not exist.');

  scenarios = [scenarioFile];
  console.log('Processing one scenario file [' + scenarioFile + ']...');
} else if (commandLine.options.scenarios) {
  scenariosDir = path.resolve(process.cwd(), commandLine.options.scenarios);
  if (!path.existsSync(scenariosDir))
    commandLine.raiseFatalError(scenariosDir + ' does not exist.');

  console.log('Processing scenario files in [' + scenariosDir + ']...');

  scenarios = fs.readdirSync(scenariosDir);
  scenarios = scenarios.filter(function(file) {
    return /\.json$/i.test(file)
  }).map(function(file) {
    return path.resolve(scenariosDir, file);
  });
  if (!scenarios.length)
    commandLine.raiseFatalError('No scenario file.');
} else {
  commandLine.raiseFatalError('You must specify scenarios by "--scenario" or ' +
                         '"--scenarios" option.');
}

scenarios = scenarios.map(function(file) {
  var scenarioName = path.basename(file, '.json');
  var scenario = { name: scenarioName,
                   path: file };

  var requests = fs.readFileSync(file);
  scenario.requests = JSON.parse(requests);

  if (commandLine.options.outputDirectory) {
    scenario.resultsDir = path.resolve(commandLine.options.outputDirectory,
                                       scenarioName);
  }

  return scenario;
});

var options = {};
Object.keys(commandLine.options).forEach(function(key) {
  var type = typeof commandLine.options[key];
  if (type != 'function' && type != 'object')
    options[key] = commandLine.options[key];
});
Object.keys(CLI.prototype).concat(Object.keys(commandLine)).forEach(function(key) {
  var type = typeof commandLine[key];
  if (type != 'function' && type != 'object')
    options[key] = commandLine[key];
});
var runner = new ScenariosRunner(options);

runner.on('scenario', function(event) {
  console.log('');
  console.log('Scenario file: ' + event.scenario.path);
  mkdirp.sync(event.scenario.resultsDir);

  event.runner.on('error:fatal', function(event) {
    commandLine.raiseFatalError(event.error);
  });

  event.runner.on('end', function(event) {
    console.log('  Done. (elapsed time: ' + event.elapsedTime + 'msec)');
  });

  event.runner.on('request:start', function(event) {
    console.log('  Processing request: ' + event.request.name);
  });

  event.runner.on('request:end', function(event) {
    var filename = ScenariosRunner.toSafeName(event.request.name) + '.txt';
    var resultPath = path.resolve(event.scenario.resultsDir, filename);
    fs.writeFile(resultPath, event.request.result);
    console.log('  Wrote ' + resultPath);
  });
});

runner.on('end', function(event) {
  console.log('');
  console.log('All scenarios are finished. ' +
                '(total elapsed time: ' + event.elapsedTime + 'msec)');
  process.exit(0);
});

runner.on('error:status_unknown', function(event) {
  commandLine.raiseFatalError('Unknown status code ' + event.statusCode);
});

runner.on('error:throttling', function() {
  commandLine.raiseFatalError('Hit rate limit. Further responses will be unreliable.');
});

runner.run(scenarios);
