#!/usr/bin/env node

/*
 Set these environment variables:
   * AWS_ACCESS_KEY_ID
   * AWS_SECRET_ACCESS_KEY
*/

var CLI = require(__dirname + '/../lib/command-line').CommandLineInterface;
var Client = require(__dirname + '/../lib/client').Client;
var fs = require('fs');
var path = require('path');
var mkdirp = require('mkdirp');

var commandLine = new CLI();
commandLine
  .usage('--scenario <path> --output-directory <path> [options] or ' +
         '--scenarios <path> --output-directory <path> [options]')
  .option('--scenario <path to a file>',
          'Path to a scenario file.',
          String)
  .option('--scenarios <path to a directory>',
          'Path to the scenarios directory which includes one or more ' +
            '".json" scenario files.',
          String)
  .option('--output-directory <path to a directory>',
          'Path to the directory to save results.',
          String)
  .option('--document-endpoint <host:port>',
          'The host and port number of the documents/batch API.',
          String)
  .option('--acs',
          'Process requests for Amazon CloudSearch.',
          String)
  .parseClient();

var client = new Client(commandLine);
if (commandLine.options.documentEndpoint)
  client.docEndpoint = commandLine.options.documentEndpoint;

var scenariosDir;
var scenarios;

if (!commandLine.options.outputDirectory)
  client.raiseFatalError('You must specify the location of the results ' +
                         'directory by "--output-directory" option.');

if (commandLine.options.scenario) {
  var scenarioFile = path.resolve(process.cwd(), commandLine.options.scenario);
  if (!path.existsSync(scenarioFile))
    client.raiseFatalError(scenarioFile + ' does not exist.');

  scenarios = [scenarioFile];
  console.log('Processing one scenario file [' + scenarioFile + ']...');
} else if (commandLine.options.scenarios) {
  scenariosDir = path.resolve(process.cwd(), commandLine.options.scenarios);
  if (!path.existsSync(scenariosDir))
    client.raiseFatalError(scenariosDir + ' does not exist.');

  console.log('Processing scenario files in [' + scenariosDir + ']...');

  scenarios = fs.readdirSync(scenariosDir);
  scenarios = scenarios.filter(function(file) {
    return /\.json$/i.test(file)
  });
  if (!scenarios.length)
    client.raiseFatalError('No scenario file.');
} else {
  client.raiseFatalError('You must specify scenarios by "--scenario" or ' +
                         '"--scenarios" option.');
}

var statusCodeTable = {
  404: 'Not Found',
  409: 'Conflict',
  400: 'Bad Request',
  200: 'OK'
};

function processScenarios(params) {
  if (!params.start) params.start = Date.now();
  var scenarioFile = params.scenarios.shift();

  console.log('');
  console.log('Scenario file: ' + scenarioFile);
  var scenario = fs.readFileSync(path.resolve(scenariosDir, scenarioFile));
  scenario = JSON.parse(scenario);

  var scenarioName = path.basename(scenarioFile, '.json');
  var resultsDir = path.resolve(commandLine.options.outputDirectory,
                                scenarioName);
  mkdirp.sync(resultsDir);

  processScenario(
    { name:       scenarioName,
      requests:   scenario,
      resultsDir: resultsDir },
    function(error) {
      if (scenarios.length) {
        processScenarios(params);
      } else {
        var elapsedTime = Date.now() - params.start;
        console.log('');
        console.log('All scenarios are finished. ' +
                    '(total elapsed time: ' + elapsedTime + 'msec)');
        process.exit(0);
      }
    }
  );
}

function scenarioNameToFileName(scenarioName) {
  return scenarioName.replace(/[^a-zA-Z0-9]+/g, '-') + '.txt';
}

function processScenario(params, callback) {
  if (!params.start) params.start = Date.now();
  if (!params.processed) params.processed = {};

  var request = params.requests.shift();

  function processNext() {
    if (params.requests.length) {
      processScenario(params, callback);
    } else {
      var elapsedTime = Date.now() - params.start;
      console.log('  Done. (elapsed time: ' + elapsedTime + 'msec)');
      if (callback)
        callback(null);
      else
        process.exit(0);
    }
  }

  if (request.onlyGCS && commandLine.options.acs)
    return processNext();

  var name = request.name;
  var count = 1;
  while (name in params.processed) {
    name = request.name + count++;
  }

  console.log('  Processing request: ' + name);

  var filename = scenarioNameToFileName(name);
  client.rawConfigurationRequest(request.params.Action, request.params, function(error, result) {
    var response = error || result;

    var statusCode = response.StatusCode;
    if (!statusCodeTable[statusCode]) {
      client.raiseFatalError('Unknown status code ' + statusCode);
    }

    var output = '';
    output += 'HTTP/1.1 ' + statusCode + ' ' + statusCodeTable[statusCode] + '\r\n';
    for (var key in response.Headers) {
      output += key + ': ' + response.Headers[key] + '\r\n';
    };
    output += '\r\n';
    output += response.Body.toString();

    var resultPath = path.resolve(params.resultsDir, filename);
    fs.writeFile(resultPath, output);
    console.log('  Wrote ' + resultPath);

    processNext();
  });
}

processScenarios({ scenarios: scenarios });
