# -*- ruby -*-

require "rbconfig"
require "uri"
require "pathname"
require "open-uri"

build_debug_p = ENV["BUILD_DEBUG"] == "yes"
debug_flags = ["CFLAGS=-ggdb3 -O0", "CXXFLAGS=-ggdb3 -O0"]

shared_object_extension = RbConfig::CONFIG["LIBRUBY_SO"].split(/\./).last

base_dir = Pathname.new(__FILE__).dirname.expand_path
top_dir = base_dir.parent.parent
tmp_dir = base_dir + "tmp"
@download_dir = tmp_dir + "download"
@build_dir = tmp_dir + "build"
@dist_dir = tmp_dir + "dist"

directory @download_dir.to_s
directory @build_dir.to_s

def download(url)
  url = URI.parse(url) unless url.is_a?(URI::Generic)
  basename = File.basename(url.path)
  downloaded_path = @download_dir + basename
  return downloaded_path if downloaded_path.exist?

  url.open do |input|
    downloaded_path.open("w") do |output|
      output.set_encoding("binary") if output.respond_to?(:set_encoding)
      buffer = ""
      while input.read(4096, buffer)
        output.print(buffer)
      end
    end
  end
  downloaded_path
end

namespace(:download) do
  task(:prepare => [@download_dir.to_s])
end

namespace(:build) do
  task(:prepare => [@build_dir.to_s])

  desc("Use debug flags for building")
  task(:debug) do
    build_debug_p = true
  end
end

libmsgpack_so_path = @dist_dir + "lib/libmsgpack.#{shared_object_extension}"
namespace(:msgpack) do
  version = "0.5.7"
  source_basename = "msgpack-#{version}"
  tar_gz_basename = "#{source_basename}.tar.gz"
  build_dir = @build_dir + "msgpack"
  directory build_dir.to_s

  file(libmsgpack_so_path.to_s) do
    Rake::Task["msgpack:install"].invoke
  end

  desc("Install MessagePack")
  task(:install => ["download:prepare", "build:prepare", build_dir.to_s]) do
    base_url = "http://msgpack.org/releases/cpp"
    tar_gz_path = download("#{base_url}/#{tar_gz_basename}")
    source_path = build_dir + source_basename
    Dir.chdir(build_dir.to_s) do
      rm_rf(source_path.to_s)
      sh("tar", "xzf", tar_gz_path.to_s) or exit(false)
      Dir.chdir(source_path.to_s) do
        options = ["--prefix=#{@dist_dir}"]
        options.concat(debug_flags) if build_debug_p
        sh("./configure", *options) or exit(false)
        sh("make", "-j8") or exit(false)
        sh("make", "install") or exit(false)
      end
    end
  end
end

libgroonga_so_path = @dist_dir + "lib/libgroonga.#{shared_object_extension}"
namespace(:groonga) do
  version = "2.0.3"
  source_basename = "groonga-#{version}"
  tar_gz_basename = "#{source_basename}.tar.gz"
  build_dir = @build_dir + "groonga"
  directory build_dir.to_s

  file(libgroonga_so_path.to_s) do
    Rake::Task["groonga:install"].invoke
  end

  desc("Install groonga")
  task(:install => [libmsgpack_so_path.to_s, build_dir.to_s]) do
    base_url = "http://packages.groonga.org/source/groonga"
    tar_gz_path = download("#{base_url}/#{tar_gz_basename}")
    source_path = build_dir + source_basename
    Dir.chdir(build_dir.to_s) do
      rm_rf(source_path.to_s)
      sh("tar", "xzf", tar_gz_path.to_s) or exit(false)
      Dir.chdir(source_path.to_s) do
        options = ["--prefix=#{@dist_dir}"]
        options << "--without-mecab"
        options << "--without-libevent"
        options << "--disable-zermq"
        options << "--disable-libedit"
        options << "--without-cutter"
        options.concat(debug_flags) if build_debug_p
        sh("./configure", *options) or exit(false)
        sh("make", "-j8") or exit(false)
        sh("make", "install") or exit(false)
      end
    end
  end
end

node_path = @dist_dir + "bin/node"
namespace(:node) do
  version = "0.6.19"
  source_basename = "node-v#{version}"
  tar_gz_basename = "#{source_basename}.tar.gz"
  build_dir = @build_dir + "node"
  directory build_dir.to_s

  file(node_path.to_s) do
    Rake::Task["node:install"].invoke
  end

  desc("Install Node.js")
  depended_libraries = [libmsgpack_so_path.to_s, libgroonga_so_path.to_s]
  task(:install => [build_dir.to_s, *depended_libraries]) do
    base_url = "http://nodejs.org/dist"
    tar_gz_path = download("#{base_url}/v#{version}/#{tar_gz_basename}")
    source_path = build_dir + source_basename
    Dir.chdir(build_dir.to_s) do
      rm_rf(source_path.to_s)
      sh("tar", "xzf", tar_gz_path.to_s) or exit(false)
      Dir.chdir(source_path.to_s) do
        options = ["--prefix=#{@dist_dir}"]
        # options.concat(debug_flags) if build_debug_p
        sh("./configure", *options) or exit(false)
        sh("make", "-j8") or exit(false)
        sh("make", "install") or exit(false)
      end
    end
  end
end

gcs_path = @dist_dir + "bin/gcs"
namespace(:gcs) do
  file(gcs_path.to_s) do
    Rake::Task["gcs:install"].invoke
  end

  desc("Install Groonga CloudSearch")
  task(:install => [node_path.to_s]) do
    Dir.chdir(@dist_dir.to_s) do
      bin_dir = @dist_dir + "bin"
      path = ENV["PATH"]
      sh("env", "PATH=#{bin_dir}:#{path}",
         "bin/npm", "install", "-g", top_dir.to_s) or exit(false)
    end
  end
end

task(:default => gcs_path.to_s)

desc("Remove all auto generated files")
task(:clean) do
  rm_rf(tmp_dir.to_s)
end
