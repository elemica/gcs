#!/usr/bin/env node

var CLI = require(__dirname + '/../lib/command-line').CommandLineInterface;
var Client = require(__dirname + '/../lib/client').Client;

var commandLine = new CLI();
commandLine
  .usage('--name <field name> --type <field type> [options]')
  .option('--name <field name>',
          'The name of the field you are configuring or deleting. Required.',
          String)
  .option('--type <field type>',
          'The type of the field that you are configuring or deleting: ' +
            'text, literal, uint. Required.',
          String)
  .option('--option <option>',
          'Configures an option for the field specified by the --name and ' +
          '--type options. Valid values: search, nosearch, facet, nofacet, ' +
          'result, noresult. Text and literal fields cannot have both the ' +
          'facet and result options enabled. By default, text and uint ' +
          'fields are always searchable and uint fields are always ' +
          'facet-enabled. (Note: If you want to specify multiple options in ' +
          'a time, do "--option option1 --opton option2" or "--option option1 ' +
          'option2".',
          String)
  .option('-d, --domain-name <domain name>',
          'The name of the domain that you are configuring. Required.',
          String)
  .option('--delete',
          'Delete the field specified by the --name and --type options.')
  .option('-f, --force', /* this is an extension of gcs-command */
          'Delete the domain without prompting for confirmation.')
  .parseClient();

var client = new Client(commandLine);

client.assertHaveDomainName();

var fieldName = commandLine.options.name;
if (!fieldName)
  client.raiseFatalError('You must specify the field name.');

function getFieldOptions() {
  var args = client.rawArgs;
  var index = args.indexOf('--option');
  if (index < 0)
    return [];

  var options = [];
  args.slice(index + 1).some(function(arg) {
    if (arg == '--option') return false;
    if (arg.indexOf('--') == 0) return true;
    options.push(arg);
  });
  return options;
}

var fieldOptions = getFieldOptions();

function doDelete(field) {
  function sendDeleteRequest() {
    client.configurationAPI.DeleteIndexField(
      {
        DomainName: client.domainName,
        IndexFieldName: fieldName
      },
      function(error, response) {
        if (error)
          client.raiseFatalError(error);
        console.log('Updated 1 Index Field:');
        process.exit(0);
      }
    );
  }

  if (!field)
    client.raiseFatalError('You must specify an existing field.');

  if (commandLine.options.force) {
    sendDeleteRequest();
  } else {
    commandLine.confirm('Really delete? [' + fieldName + '] (y/N) ', function(ok){
      if (ok) {
        sendDeleteRequest();
      } else {
        process.exit(1);
      }
    });
  }
}

client.getIndexFieldStatus(fieldName, function(error, field) {
  if (commandLine.options.delete)
    return doDelete(field);

  var type = commandLine.options.type;
  if (!type && field)
    type = field.Options.IndexFieldType;

  if (!field) {
    if (!type)
      client.raiseFatalError('You must specify the field type.');
  }

  switch (type) {
    case 'text':
    case 'uint':
    case 'literal':
      break;
    default:
      client.raiseFatalError('invalid field type ' + type);
  }

  var params = {
        DomainName: client.domainName,
        IndexField: {
          IndexFieldName: fieldName,
          IndexFieldType: type
        }
      };

  var options = {};
  fieldOptions.forEach(function(option) {
    switch (option) {
      case 'search':   options.SearchEnabled = 'true';  break;
      case 'nosearch': options.SearchEnabled = 'false'; break;
      case 'facet':    options.FacetEnabled =  'true';  break;
      case 'nofacet':  options.FacetEnabled =  'false'; break;
      case 'result':   options.ResultEnabled = 'true';  break;
      case 'noresult': options.ResultEnabled = 'false'; break;
      default:
        client.raiseFatalError('invalid field option ' + option);
    }
  });

  if (options.FacetEnabled == 'true' &&
      options.ResultEnabled == 'true')
    client.raiseFatalError('"facet" and "result" options are exclusive.');

  switch (type) {
    case 'text':
      if ('SearchEnabled' in options)
        client.raiseFatalError('searchable option cannot be configured for the type text.');
      params.IndexField.TextOptions = options;
      break;

    case 'uint':
      if ('FacetEnabled' in options)
        client.raiseFatalError('facet option cannot be configured for the type uint.');
      if ('ResultEnabled' in options)
        client.raiseFatalError('returnable option cannot be configured for the type uint.');
      if ('SearchEnabled' in options)
        client.raiseFatalError('searchable option cannot be configured for the type uint.');
      params.IndexField.UIntOptions = options;
      break;

    case 'literal':
      params.IndexField.LiteralOptions = options;
      break;
  }


  client.configurationAPI.DefineIndexField(params, function(error, response) {
    if (error)
      client.raiseFatalError(error);

    console.log('Updated 1 Index Field:');

    var field = response.Body.DefineIndexFieldResponse.DefineIndexFieldResult.IndexField;
    console.log(client.summarizeIndexFieldStatus(field));

    process.exit(0);
  });
});
