#!/usr/bin/env node
/* vim: set filetype=javascript */

var nroonga = require('nroonga');
var program = require('commander');
var fs = require('fs');
var BatchProcessor = require('batch').BatchProcessor;

program
  .usage('[options] [batch files]...')
  .option('--database-path <path>',
          'path to the database file [(project root)/database/croonga]',
          String,
          __dirname + '/../database/croonga')
  .option('--domain <name>',
          'the name of the domain',
          String)
  .option('--encoding <encoding>',
          'character encoding of batch files [UTF-8]',
          String,
          'UTF-8')
  .parse(process.argv);

function BatchCommand(options) {
  this.databasePath = options.databasePath;
  this.domain = options.domain;
  this.encoding = options.encoding;
  this.init();
}
BatchCommand.prototype = {
  init: function() {
    this.assertOptions();

    console.log('domain = ' + this.domain);
    console.log('database = ' + this.databasePath);
  },

  assertOptions: function() {
    if (!this.domain)
      throw new Error('You must specify the domain name!');
  },

  processAll: function(paths) {
    for (var i = 0, maxi = paths.length; i < maxi; i++) {
      this.process(paths[i]);
    }
  },

  process: function(path) {
    console.log('processing batch file [' + path + ']...');

    var batch = fs.readFileSync(path, this.encoding)
    batch = JSON.parse(batch);
    var processor = BatchProcessor.new({
          databasePath: this.databasePath,
          domain: this.domain
        });
    processor.process(batch);
  }
}

var batchProcessor = new BatchProcessor({
      databasePath: program.databasePath,
      domain: program.domain,
      encoding: program.encoding
    });

var batcheFilePaths = program.args;
batchProcessor.processAll(batcheFilePaths);
