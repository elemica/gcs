#!/usr/bin/env node

var CLI = require(__dirname + '/../lib/command-line').CommandLineInterface;
var Client = require(__dirname + '/../lib/client').Client;
var fs = require('fs');

var commandLine = new CLI();
commandLine
  .option('-d, --domain-name <domain name>',
          'The name of the domain that you are querying or configuring. Required.',
          String)
  .option('-stems <path to stems file>',
          'The path for a stemming dictionary file. The stemming ' +
            'dictionary file should contain one comma-separated ' +
            'term, stem pair per line. For example:\n' +
            '  mice, mouse\n' +
            '  people, person\n' +
            '  running, run',
          String)
  .option('--stopwords <path to stopwords file>',
          'The path for a stopwords dictionary file. The stopwords ' +
            'dictionary file should contain one stopword per line. ' +
            'For example:\n' +
            '  the\n' +
            '  or\n' +
            '  and',
          String)
  .option('--synonyms <path to synonyms file>',
          'The path for a synonyms dictionary file. Each line in the '+
            'file should specify term forrowed by a comma-separated ' +
            'list of its synonyms. For example:\n' +
            '  cat, feline, kitten\n' +
            '  dog, canine, puppy\n' +
            '  hourse, equite, ',
          String)
  .option('-psm, --print-stems',
          'List the domain\'s stems.')
  .option('-psw, --print-stopwords',
          'List the domain\'s stopwords.')
  .option('-psn, --print-synonyms',
          'List the domain\'s synonyms.')
  .parse();

function strip(string) {
  return string.replace(/^\s+|\s+$/g, '');
}

var client = new Client(commandLine);

client.assertHaveDomainName();
client.getDomainStatus(function(error, domain) {
  if (error)
    client.raiseFatalError(error);

  var printOptions = ['printStems', 'printStopwords', 'printSynonyms'];
  var loadOptions = ['stems', 'stopwords', 'synonyms'];

  if (commandLine.hasTooManyExclusiveOptions(printOptions))
    client.raiseFatalError('Too many options. ' +
                           'You must specify just one option from ' +
                           '--print-stems, --print-stopwords, or --print-synonyms.');

  if (printOptions.some(function(option) {
        return commandLine.options[option];
      }) &&
      loadOptions.some(function(option) {
        return commandLine.options[option];
      }))
    client.raiseFatalError('Too many options. ' +
                           'You cannot do print and load on the same time.');

  if (commandLine.options.printStems) {
  } else if (commandLine.options.printStopwords) {
  } else if (commandLine.options.printSynonyms) {
    client.configurationAPI.DescribeSynonymOptions(
      { DomainName: client.domainName },
      function(error, response) {
        if (error)
          client.raiseFatalError(error);
        try {
          var synonyms = response.Body.DescribeSynonymOptionsResponse
                                      .DescribeSynonymOptionsResult
                                      .Synonyms
                                      .Options;
          synonyms = JSON.parse(synonyms);
          Object.keys(synonyms).forEach(function(term) {
            console.log([term].concat(synonyms[term]).join(','));
          });
          process.exit(0);
        } catch(error) {
          client.raiseFatalError(error);
        }
      }
    });
  } else {
    if (commandLine.options.stems) {
    }
    if (commandLine.options.stopwords) {
    }
    if (commandLine.options.synonyms) {
      var synonymsFile = CLI.resolve(commandLine.options.synonyms);
      var synonymsCSV = fs.readFileSync(synonymsFile, 'UTF-8');
      var synonyms = {};
      synonymsCSV.split('\n').forEach(function(synonym) {
        synonym = strip(synonym);
        if (!synonym) return;
        var terms = synonym.split(',');
        var key = strip(terms.shift());
        var previousTerms = synonyms[key] || [];
        synonyms[key] = previousTerms.concat(terms.map(strip));
      });
      client.configurationAPI.UpdateSynonymOptions(
        {
          DomainName: client.domainName,
          Synonyms: JSON.stringify({ synonyms: synonyms })
        },
        function(error, response) {
          if (error)
            client.raiseFatalError(error);
          try {
            console.log('%s synonyms are loaded.', Object.keys(synonyms).length);
          } catch(error) {
            client.raiseFatalError(error);
          }
        }
      });
    }
  }
});
