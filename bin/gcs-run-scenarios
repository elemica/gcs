#!/usr/bin/env node

/*
 Set these environment variables:
   * AWS_ACCESS_KEY_ID
   * AWS_SECRET_ACCESS_KEY
*/

var CLI = require(__dirname + '/../lib/command-line').CommandLineInterface;
var Client = require(__dirname + '/../lib/client').Client;
var fs = require('fs');
var path = require('path');

var commandLine = new CLI();
commandLine
  .usage('--scenarios <path to a directory> [options]')
  .option('--scenarios <path to a directory>',
          'Path to the scenarios directory which includes "scenarios.json".',
          String)
  .option('--document-endpoint <host:port>',
          'The host and port number of the documents/batch API.',
          String)
  .option('--acs',
          'Process requests for Amazon CloudSearch.',
          String)
  .parseClient();

var client = new Client(commandLine);
if (commandLine.options.documentEndpoint)
  client.docEndpoint = commandLine.options.documentEndpoint;

var scenariosDir = path.resolve(process.cwd(), commandLine.options.scenarios);
var scenariosFile = path.resolve(scenariosDir, 'scenarios.json');
if (!commandLine.options.scenarios ||
    !path.existsSync(scenariosFile))
  client.raiseFatalError('You must specify the path to a scenarios directory ' +
                         'by "--scenarios" option.');
}

var scenarios = JSON.parse(fs.readFileSync(scenariosFile));

cs = new CloudSearch({
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
});

CloudSearch.prototype.extractBody = function(options) {
  return 'blob';
};

var statusCodeTable = {
  404: 'Not Found',
  400: 'Bad Request',
  200: 'OK'
};

var resultsDirName = commandLine.options.acs ? 'results-acs' : 'results';
var resultsDir.resolve(resultsDirName, resultsDirectoryName);
scenarios.forEach(function(scenario) {
  console.log('Processing ' + scenario.name);
  var filename = scenario.name.replace(/[^a-zA-Z0-9]+/g, '-') + '.txt';
  cs[scenario.params.Action].call(cs, scenario.params, function(error, data) {
    var response = error || data;

    var statusCode = response.StatusCode;
    if (!statusCodeTable[statusCode]) {
      throw "Unknown status code " + statusCode;
    }

    var output = '';
    output += 'HTTP/1.1 ' + statusCode + ' ' + statusCodeTable[statusCode] + '\r\n';
    for (var key in response.Headers) {
      output += key + ': ' + response.Headers[key] + '\r\n';
    };
    output += '\r\n';
    output += response.Body.toString();

    var resultPath = resultsDir.resolve(resultsDir, filename);
    fs.writeFile(resultPath, output);
    console.log('Wrote ' + resultPath);
  });
});
