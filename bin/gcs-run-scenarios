#!/usr/bin/env node

/*
 Set these environment variables:
   * AWS_ACCESS_KEY_ID
   * AWS_SECRET_ACCESS_KEY
*/

var CLI = require(__dirname + '/../lib/command-line').CommandLineInterface;
var Client = require(__dirname + '/../lib/client').Client;
var fs = require('fs');
var path = require('path');
var mkdirp = require('mkdirp');

var commandLine = new CLI();
commandLine
  .usage('--scenarios <path to a directory> [options]')
  .option('--scenarios <path to a directory>',
          'Path to the scenarios directory which includes one or more ' +
            '".json" scenario files.',
          String)
  .option('--document-endpoint <host:port>',
          'The host and port number of the documents/batch API.',
          String)
  .option('--acs',
          'Process requests for Amazon CloudSearch.',
          String)
  .parseClient();

var client = new Client(commandLine);
if (commandLine.options.documentEndpoint)
  client.docEndpoint = commandLine.options.documentEndpoint;

var scenariosDir = path.resolve(process.cwd(), commandLine.options.scenarios);
if (!commandLine.options.scenarios ||
    !path.existsSync(scenariosDir)) {
  client.raiseFatalError('You must specify the path to a scenarios directory ' +
                         'by "--scenarios" option.');
}

console.log('Processing scenario files in ' + scenariosDir + '...');

var scenarios = fs.readdirSync(scenariosDir);
scenarios = scenarios.filter(function(file) {
  return /\.json$/i.test(file)
});
if (!scenarios.length) {
  client.raiseFatalError('No scenario file.');
}

var statusCodeTable = {
  404: 'Not Found',
  400: 'Bad Request',
  200: 'OK'
};

var resultsDirNameSuffix = commandLine.options.acs ? 'results-acs' : 'results';

function processScenarios(scenarios) {
  var scenarioFileName = scenarios.shift();

  console.log('Scenario file: ' + scenarioFileName);
  var scenario = fs.readFileSync(path.resolve(scenariosDir, scenarioFileName));
  scenario = JSON.parse(scenario);

  var scenarioName = scenarioFileName.replace(/\.json$/i, '');
  var resultsDir = path.resolve(scenariosDir, scenarioName + '-' + resultsDirNameSuffix);
  mkdirp.sync(resultsDir);

  processScenario(
    { name:       scenarioName,
      requests:   scenario,
      resultsDir: resultsDir },
    function(error) {
      if (scenarios.length)
        processScenarios(scenarios);
      else
        process.exit(0);
    }
  );
}

function processScenario(params, callback) {
  var request = params.requests.shift();

  console.log('Processing request: ' + request.name);

  var filename = request.name.replace(/[^a-zA-Z0-9]+/g, '-') + '.txt';
  client.rawConfigurationRequest(request.params.Action, request.params, function(error, result) {
    var response = error || result;

    var statusCode = response.StatusCode;
    if (!statusCodeTable[statusCode]) {
      throw "Unknown status code " + statusCode;
    }

    var output = '';
    output += 'HTTP/1.1 ' + statusCode + ' ' + statusCodeTable[statusCode] + '\r\n';
    for (var key in response.Headers) {
      output += key + ': ' + response.Headers[key] + '\r\n';
    };
    output += '\r\n';
    output += response.Body.toString();

    var resultPath = path.resolve(params.resultsDir, filename);
    fs.writeFile(resultPath, output);
    console.log('Wrote ' + resultPath);

    if (params.requests.length)
      processScenario(params, callback);
    else if (callback)
      callback(null, null);
    else
      process.exit(0);
  });
}

processScenarios(scenarios);
