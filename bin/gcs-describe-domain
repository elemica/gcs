#!/usr/bin/env node

var CLI = require(__dirname + '/../lib/command-line').CommandLineInterface;
var Client = require(__dirname + '/../lib/client').Client;

var commandLine = new CLI();
commandLine
  .option('-d, --domain-name <domain name>',
          'The name of the domain that you are creating. Required.',
          String)
  .option('-all, --show-all',
          'Display all available information for the domain, '
             + 'including configured fields.',
          String)
  .parseClient();

var client = new Client(commandLine);


function arnToEndpoint(arn, prefix) {
  var match = arn.test(/^arn:aws:cs:[^:]+:([^:]+):(?:doc|search)/(.+)$/);
  if (!match)
    client.raiseFatalError('invalid arn: ' + arn);

  var name = match[2];
  var id = match[1];
  var hostAndPort = client.host + ':' + client.port;
  return prefix + '-' + name + '-' + id + '.' + hostAndPort;
}

function reportStatus(domain, indexFields, defaultSearchField) {
  console.log('=== Domain Summary ===');
  console.log('Domain Name: %s',
              domain.DomainName);
  console.log('Document Service endpoint: %s',
              arnToEndpoint(domain.DocService.Arn, 'doc'));
  console.log('Search Service endpoint: %s',
              arnToEndpoint(domain.SearchService.Arn, 'search'));
  console.log('SearchInstanceType: %s',
              null);
  console.log('SearchPartitionCount: %s',
              domain.SearchPartitionCount);
  console.log('SearchInstanceCount: %s',
              domain.SearchInstanceCount);
  console.log('Searchable Documents: %s',
              domain.NumSearchableDocs);
  console.log('Current configuration changes require a call to ' +
                'IndexDocuments: %s',
              domain.RequiresIndexDocuments == 'true' ? 'Yes' : 'No' );

  // additional information for the default search field!
  if (defaultSearchField)
    console.log('Default search field: %s', defaultSearchField);

  console.log('');
  console.log('=== Domain Configuration ===');

  console.log('');
  console.log('Fields:');
  console.log('=======');
  indexFields.forEach(function(indexField) {
    console.log(client.summarizeIndexFieldStatus(indexField));
  });
  console.log('======================');
}

function reportDomains(domains) {
  var indexFieldStatuses = {};
  var defaultSearchFields = {};
  var indexFieldStatusesCount = 0;
  var defaultSearchFieldsCount = 0;

  function tryDoReport() {
    if (indexFieldStatusesCount == domains.length &&
        defaultSearchFieldsCount == domains.length) {
      domains.forEach(function(domain, index) {
        if (index) console.log('');
        var indexFields = indexFieldStatuses[domain.DomainName];
        var defaultSearchField = defaultSearchFields[domain.DomainName];
        reportStatus(domain, indexFields, defaultSearchField);
      });
      process.exit(0);
    }
  }

  domains.forEach(function(domain) {
    var domainName = domain.DomainName;
    client.getIndexFieldStatuses(domainName, function(error, indexFields) {
      if (error)
        client.raiseFatalError(error);
      indexFieldStatuses[domainName] = indexFields;
      indexFieldStatusesCount++;
      tryDoReport();
    });
    client.getDefaultSearchField(domainName, function(error, defaultSearchFieldResult) {
      if (error)
        client.raiseFatalError(error);
      defaultSearchFields[domainName] = defaultSearchFieldResult;
      defaultSearchFieldsCount++;
      tryDoReport();
    });
  });
}

var domainName = client.domainName;
if (domainName) {
  client.getDomainStatus(function(error, domain) {
    if (error)
      client.raiseFatalError(error);
    reportDomains([domain]);
  });
} else {
  client.getDomainStatuses(function(error, domains) {
    if (error)
      client.raiseFatalError(error);
    reportDomains(domains);
  });
}
