#!/usr/bin/env node

var CLI = require(__dirname + '/../lib/command-line').CommandLineInterface;
var commandLine = new CLI();

commandLine
  .option('-d, --domain-name <domain name>',
          'The name of the domain that you are creating. Required.',
          String)
  .option('-all, --show-all',
          'Display all available information for the domain, '
             + 'including configured fields.',
          String)
  .parse();

function reportStatus(domain, indexFields) {
  console.log('=== Domain Summary ===');
  console.log('Domain Name: %s',
              domain.DomainName);
  console.log('Document Service endpoint: %s',
              domain.DocService.Endpoint);
  console.log('Search Service endpoint: %s',
              domain.SearchService.Endpoint);
  console.log('SearchInstanceType: %s',
              null);
  console.log('SearchPartitionCount: %s',
              domain.SearchPartitionCount);
  console.log('SearchInstanceCount: %s',
              domain.SearchInstanceCount);
  console.log('Searchable Documents: %s',
              domain.NumSearchableDocs);
  console.log('Current configuration changes require a call to ' +
                'IndexDocuments: %s',
              domain.RequiresIndexDocuments == 'true' ? 'Yes' : 'No' );

//  // additional information for the default search field!
//  var field = status.defaultSearchField;
//  if (field)
//    console.log('Default search field: %s', field.name);

  console.log('');
  console.log('=== Domain Configuration ===');

  console.log('');
  console.log('Fields:');
  console.log('=======');
  indexFields.forEach(function(indexField) {
    console.log(commandLine.summarizeIndexFieldStatus(indexField));
  });
  console.log('======================');
}

var domainName = commandLine.domainName;
if (domainName) {
  commandLine.getDomainStatus(domainName, function(error, domain) {
    if (error)
      commandLine.raiseFatalError(error);
    commandLine.getIndexFieldStatuses(domainName, function(error, indexFields) {
      if (error)
        commandLine.raiseFatalError(error);
      reportStatus(domain, indexFields);
      process.exit(0);
    });
  });
} else {
  commandLine.getDomainStatuses(function(error, domains) {
    if (error)
      commandLine.raiseFatalError(error);
    var indexFieldStatuses = {};
    var preparedStatusesCount = 0;
    domains.forEach(function(domain) {
      var domainName = domain.DomainName;
      commandLine.getIndexFieldStatuses(domainName, function(error, indexFields) {
        if (error)
          commandLine.raiseFatalError(error);
        indexFieldStatuses[domainName] = indexFields;
        preparedStatusesCount++;
        if (preparedStatusesCount == domains.length) {
          domains.forEach(function(domain, index) {
            if (index) console.log('');
            var statuses = indexFieldStatuses[domain.DomainName];
            reportStatus(domain, statuses);
            process.exit(0);
          });
        }
      });
    });
  });
}
