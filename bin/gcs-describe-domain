#!/usr/bin/env node

var CLI = require(__dirname + '/../lib/command-line').CommandLineInterface;
var commandLine = new CLI();

commandLine
  .option('-d, --domain-name <domain name>',
          'The name of the domain that you are creating. Required.',
          String)
  .option('-all, --show-all',
          'Display all available information for the domain, '
             + 'including configured fields.',
          String)
  .parse();

function reportStatus(domain, indexFields, defaultSearchField) {
  console.log('=== Domain Summary ===');
  console.log('Domain Name: %s',
              domain.DomainName);
  console.log('Document Service endpoint: %s',
              domain.DocService.Endpoint);
  console.log('Search Service endpoint: %s',
              domain.SearchService.Endpoint);
  console.log('SearchInstanceType: %s',
              null);
  console.log('SearchPartitionCount: %s',
              domain.SearchPartitionCount);
  console.log('SearchInstanceCount: %s',
              domain.SearchInstanceCount);
  console.log('Searchable Documents: %s',
              domain.NumSearchableDocs);
  console.log('Current configuration changes require a call to ' +
                'IndexDocuments: %s',
              domain.RequiresIndexDocuments == 'true' ? 'Yes' : 'No' );

  // additional information for the default search field!
  if (defaultSearchField)
    console.log('Default search field: %s', defaultSearchField);

  console.log('');
  console.log('=== Domain Configuration ===');

  console.log('');
  console.log('Fields:');
  console.log('=======');
  indexFields.forEach(function(indexField) {
    console.log(commandLine.summarizeIndexFieldStatus(indexField));
  });
  console.log('======================');
}

var domainName = commandLine.domainName;
if (domainName) {
  commandLine.getDomainStatus(domainName, function(error, domain) {
    if (error)
      commandLine.raiseFatalError(error);

    var indexFields = null;
    var defaultSearchField = null;

    function tryDoReport() {
      if (indexFields !== null &&
          defaultSearchField !== null) {
        reportStatus(domain, indexFields, defaultSearchField);
        process.exit(0);
      }
    }

    commandLine.getIndexFieldStatuses(domainName, function(error, indexFieldStatuses) {
      if (error)
        commandLine.raiseFatalError(error);
      indexFields = indexFieldStatuses;
      tryDoReport();
    });
    commandLine.getDefaultSearchField(domainName, function(error, defaultSearchFieldResult) {
      if (error)
        commandLine.raiseFatalError(error);
      defaultSearchField = defaultSearchFieldResult;
      tryDoReport();
    });
  });
} else {
  commandLine.getDomainStatuses(function(error, domains) {
    if (error)
      commandLine.raiseFatalError(error);
    var indexFieldStatuses = {};
    var defaultSearchFields = {};
    var indexFieldStatusesCount = 0;
    var defaultSearchFieldsCount = 0;

    function tryDoReport() {
      if (indexFieldStatusesCount == domains.length &&
          defaultSearchFieldsCount == domains.length) {
        domains.forEach(function(domain, index) {
          if (index) console.log('');
          var indexFields = indexFieldStatuses[domain.DomainName];
          var defaultSearchField = defaultSearchFields[domain.DomainName];
          reportStatus(domain, indexFields, defaultSearchField);
        });
        process.exit(0);
      }
    }

    domains.forEach(function(domain) {
      var domainName = domain.DomainName;
      commandLine.getIndexFieldStatuses(domainName, function(error, indexFields) {
        if (error)
          commandLine.raiseFatalError(error);
        indexFieldStatuses[domainName] = indexFields;
        indexFieldStatusesCount++;
        tryDoReport();
      });
      commandLine.getDefaultSearchField(domainName, function(error, defaultSearchFieldResult) {
        if (error)
          commandLine.raiseFatalError(error);
        defaultSearchFields[domainName] = defaultSearchFieldResult;
        defaultSearchFieldsCount++;
        tryDoReport();
      });
    });
  });
}
