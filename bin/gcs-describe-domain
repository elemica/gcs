#!/usr/bin/env node

var CLI = require(__dirname + '/../lib/command-line').CommandLineInterface;
var commandLine = new CLI();

commandLine
  .option('-d, --domain-name <domain name>',
          'The name of the domain that you are creating. Required.',
          String)
  .option('-all, --show-all',
          'Display all available information for the domain, '
             + 'including configured fields.',
          String)
  .parse();

var hostPort = '127.0.0.1.xip.io:7575';

function report(domain) {
  console.log('=== Domain Summary ===');
  console.log('Domain Name: %s',
              domain.name);
  console.log('Document Service endpoint: %s',
              domain.getDocumentsEndpoint(hostPort));
  console.log('Search Service endpoint: %s',
              domain.getSearchEndpoint(hostPort));
  console.log('SearchInstanceType: %s',
              domain.searchInstanceType);
  console.log('SearchPartitionCount: %s',
              domain.searchPartitionCount);
  console.log('SearchInstanceCount: %s',
              domain.searchInstanceCount);
  console.log('Searchable Documents: %s',
              domain.searchableDocumentsCount);
  console.log('Current configuration changes require a call to ' +
                'IndexDocuments: %s',
              domain.requiresIndexDocuments ? 'Yes' : 'No' );

  // additional information for the default search field!
  var field = domain.defaultSearchField;
  if (field)
    console.log('Default search field: %s', field.name);

  console.log('');
  console.log('=== Domain Configuration ===');

  console.log('');
  console.log('Fields:');
  console.log('=======');
  domain.indexFields.forEach(function(field) {
    console.log(field.summary);
  });
  console.log('======================');
}

function reportStatus(domain, indexFields) {
  console.log('=== Domain Summary ===');
  console.log('Domain Name: %s',
              domain.DomainName);
  console.log('Document Service endpoint: %s',
              domain.DocService.Endpoint);
  console.log('Search Service endpoint: %s',
              domain.SearchService.Endpoint);
  console.log('SearchInstanceType: %s',
              null);
  console.log('SearchPartitionCount: %s',
              domain.SearchPartitionCount);
  console.log('SearchInstanceCount: %s',
              domain.SearchInstanceCount);
  console.log('Searchable Documents: %s',
              domain.NumSearchableDocs);
  console.log('Current configuration changes require a call to ' +
                'IndexDocuments: %s',
              domain.RequiresIndexDocuments == 'true' ? 'Yes' : 'No' );

//  // additional information for the default search field!
//  var field = status.defaultSearchField;
//  if (field)
//    console.log('Default search field: %s', field.name);

  console.log('');
  console.log('=== Domain Configuration ===');

  console.log('');
  console.log('Fields:');
  console.log('=======');
  indexFields.forEach(function(indexField) {
    console.log(commandLine.summarizeIndexFieldStatus(indexField));
  });
  console.log('======================');
}

function outputNotesForHostAndPort() {
  console.log('*Note: the hostname and the port number is detected from ' +
              'the default options. If you run the service with your ' +
              'favorite host name and port number, then use it instead of ' +
              'default information.');
}

if (commandLine.domainName) {
  commandLine.getDomainStatus(
    commandLine.domainName,
    function(error, domainStatus) {
      commandLine.getIndexFieldStatus(
        commandLine.domainName,
        function(error, indexFieldStatuses) {
          reportStatus(domainStatus, indexFieldStatuses);
          outputNotesForHostAndPort();
        }
      );
    }
  );
} else {
  var domains = CLI.Domain.getAll(commandLine.context);
  domains.forEach(function(domain, index) {
    if (index) console.log('');
    report(domain);
  });
  if (domains.length)
    outputNotesForHostAndPort();
}
