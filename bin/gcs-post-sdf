#!/usr/bin/env node

var CLI = require(__dirname + '/../lib/command-line').CommandLineInterface;
var Client = require(__dirname + '/../lib/client').Client;
var fs = require('fs');
var path = require('path');

var commandLine = new CLI();
commandLine
  .usage('--source <path to SDF file> [options]')
  .option('-s, --source <path to SDF file>',
          'The path to a file which contains the SDF data you want to upload.',
          String)
  .option('-d, --domain-name <domain name>',
          'The name of the domain that you are updating. Required.',
          String)
  .parse();

var client = new Client(commandLine);

client.assertHaveDomainName();
client.assertDomainExists(function() {
  if (!commandLine.options.source)
    client.raiseFatalError('You must specify the source SDF.');

  var sourceFile = CLI.resolve(commandLine.options.source);
  console.log('Processing: %s', sourceFile);

  if (!path.existsSync(sourceFile))
    client.raiseFatalError('No such file');

  var format = sourceFile.match(/\.(xml|json)$/i);
  if (!format) {
    client.raiseFatalError('Unknown format');

  format = format[1].toLowerCase();
  console.log('Detected source format for %s as %s', path.basename(sourceFile), format)

  if (format != 'json')
    client.raiseFatalError('Unsupported format: %s');

  try {
    var batches = fs.readFileSync(sourceFile, 'UTF-8');
    batches = JSON.parse(batches);

    client.documentsAPI.DocumentsBatch(
      {
        args: {
          Docs: batches
        }
      },
      function(error, response) {
        if (error)
          client.raiseFatalError(error);

        try {
          var errors = response.Body.errors.map(function(error) { return error.message; });
          if (errors.length) {
            console.log('Validation failed.');
            console.log(errors.join('\n'));
            return process.exit(1);
          }
          console.log('Status: %s', response.Body.status);
          console.log('Added: %s', response.Body.adds);
          console.log('Deleted: %s', response.Body.deletes);
          process.exit(0);
        } catch(error) {
          client.raiseFatalError(error);
        }
      }
    );
  } catch(error) {
    client.raiseFatalError('Fatal error!\n' +
                           error.message + '\n' + error.stack);
  }
});
