#!/usr/bin/env node

var CLI = require(__dirname + '/../lib/command-line').CommandLineInterface;
var Client = require(__dirname + '/../lib/client').Client;
var path = require('path');

var commandLine = new CLI();
commandLine
  .usage('--source <path to SDF file> ' +
         '[options]')
  .option('-s, --source <path to SDF file>',
          'The path to a file which contains the SDF data you want to upload.',
          String)
  .option('-d, --domain-name <domain name>',
          'The name of the domain that you are updating. Required.',
          String)
  .option('--document-endpoint <host:port>',
          'The host and port number of the documents/batch API.',
          String)
  .parseClient();

var client = new Client(commandLine);
if (commandLine.options.documentEndpoint)
  client.docEndpoint = commandLine.options.documentEndpoint;

client.assertHaveDomainName();
client.assertDomainExists(function() {
  if (!commandLine.options.source)
    client.raiseFatalError('You must specify the source SDF.');

  var sourceFile = CLI.resolve(commandLine.options.source);
  console.log('Processing: %s', sourceFile);

  if (!path.existsSync(sourceFile))
    client.raiseFatalError('No such file');

  var format = client.detectFileFormat(sourceFile);
  console.log('Detected source format for %s as %s', path.basename(sourceFile), format)

  try {
    client.setupAPI('doc', function(documentsAPI) {
      documentsAPI.DocumentsBatch(
        {
          Docs: client.readSDFBatch(sourceFile, format)
        },
        function(error, response) {
          if (error)
            client.raiseFatalError(error);

          try {
            var errors = response.Body.errors;
            if (errors && errors.length) {
              errors = errors.map(function(error) { return error.message; });
              console.log('Validation failed.');
              console.log(errors.join('\n'));
              return process.exit(1);
            }
            console.log('Status: %s', response.Body.status);
            console.log('Added: %s', response.Body.adds);
            console.log('Deleted: %s', response.Body.deletes);
            process.exit(0);
          } catch(error) {
            client.raiseFatalError(error.message + '\n' + error.stack);
          }
        }
      );
    });
  } catch(error) {
    client.raiseFatalError('Fatal error!\n' +
                           error.message + '\n' + error.stack);
  }
});
